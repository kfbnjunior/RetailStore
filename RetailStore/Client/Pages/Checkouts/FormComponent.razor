@inject HttpClient _client

<EditForm Model="@checkout" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Item: </label>
            <div>
               @* <InputSelect @bind-Value="checkout.ItemId" class="form-control">*@
                    <option value="">-- Select Item --</option>
                    @if (Items != null)
                {
                    foreach (var item in Items)
                    {
                    @*<option value="@item.Id">@item.Creates.Name </option>*@
            }
        }
               @* </InputSelect>*@
                @*<ValidationMessage For="@(() => checkout.ItemId)" />*@
            </div>
        </div>

        <div class="form-group">
            <label>Customer: </label>
            <div>
                @*<InputSelect @bind-Value="checkout.CustomerId" class="form-control">*@
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                    <option value="@customer.Id">@customer.FirstName @customer.LastName </option>
            }
        }
                @*</InputSelect>*@
                @*<ValidationMessage For="@(() => checkout.CustomerId)" />*@
            </div>
        </div>

        }
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="checkouts" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Checkout checkout { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Item> Items;
    private IList<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        //booking.DateOut = DateTime.Now;
    }
}
